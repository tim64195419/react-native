{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/chengpo-chien/expo-practice/Mahjong/screens/DashboardScreen.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport MapView from 'react-native-maps';\nimport * as Permissions from 'expo-permissions';\nimport firebase from 'firebase';\nimport Polyline from '@mapbox/polyline';\nimport { Marker } from 'react-native-maps';\n\nvar locations = require(\"./locations.json\");\n\nvar DashboardScreen = function (_React$Component) {\n  _inherits(DashboardScreen, _React$Component);\n\n  var _super = _createSuper(DashboardScreen);\n\n  function DashboardScreen() {\n    var _this;\n\n    _classCallCheck(this, DashboardScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      latitude: null,\n      longitude: null,\n      locations: locations\n    };\n\n    _this.mergeCoords = function () {\n      var _this$state = _this.state,\n          latitude = _this$state.latitude,\n          longitude = _this$state.longitude,\n          desLatitude = _this$state.desLatitude,\n          desLongitude = _this$state.desLongitude;\n      var hasStartAndEnd = latitude !== null && desLatitude !== null;\n\n      if (hasStartAndEnd) {\n        var concatStart = latitude + \",\" + longitude;\n        var concatEnd = desLatitude + \",\" + desLongitude;\n\n        _this.getDirections(concatStart, concatEnd);\n      }\n    };\n\n    _this.onMarkerPress = function (location) {\n      return function () {\n        var _location$coords = location.coords,\n            latitude = _location$coords.latitude,\n            longitude = _location$coords.longitude;\n\n        _this.setState({\n          destination: location,\n          desLatitude: latitude,\n          desLongitude: longitude\n        }, _this.mergeCoords);\n      };\n    };\n\n    _this.renderMarkers = function () {\n      var locations = _this.state.locations;\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 7\n        }\n      }, locations.map(function (location, idx) {\n        var _location$coords2 = location.coords,\n            latitude = _location$coords2.latitude,\n            longitude = _location$coords2.longitude;\n        return React.createElement(Marker, {\n          key: idx,\n          coordinate: {\n            latitude: latitude,\n            longitude: longitude\n          },\n          onPress: _this.onMarkerPress(location),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }\n        });\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(DashboardScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _await$Permissions$ge, status, response, _this$state$locations, sampleLocation;\n\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.LOCATION));\n\n            case 2:\n              _await$Permissions$ge = _context.sent;\n              status = _await$Permissions$ge.status;\n\n              if (!(status !== 'granted')) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.LOCATION));\n\n            case 7:\n              response = _context.sent;\n\n            case 8:\n              navigator.geolocation.getCurrentPosition(function (_ref) {\n                var _ref$coords = _ref.coords,\n                    latitude = _ref$coords.latitude,\n                    longitude = _ref$coords.longitude;\n                return _this2.setState({\n                  latitude: latitude,\n                  longitude: longitude\n                }, _this2.mergeCoords);\n              }, function (error) {\n                return console.log('Error:', error);\n              });\n              _this$state$locations = _slicedToArray(this.state.locations, 1), sampleLocation = _this$state$locations[0];\n              this.setState({\n                desLatitude: sampleLocation.coords.latitude,\n                desLongitude: sampleLocation.coords.longitude\n              }, this.mergeCoords);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getDirections\",\n    value: function getDirections(startLoc, desLoc) {\n      var resp, respJson, response, distanceTime, distance, time, points, coords;\n      return _regeneratorRuntime.async(function getDirections$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(fetch(\"https://maps.googleapis.com/maps/api/directions/json?origin=\" + startLoc + \"&destination=\" + desLoc + \"&key=AIzaSyDgkU5775LUQXl8NDdIJzXNEyun95sA_rY\"));\n\n            case 3:\n              resp = _context2.sent;\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(resp.json());\n\n            case 6:\n              respJson = _context2.sent;\n              response = respJson.routes[0];\n              distanceTime = response.legs[0];\n              distance = distanceTime.distance.text;\n              time = distanceTime.duration.text;\n              points = Polyline.decode(respJson.routes[0].overview_polyline.points);\n              coords = points.map(function (point) {\n                return {\n                  latitude: point[0],\n                  longitude: point[1]\n                };\n              });\n              this.setState({\n                coords: coords,\n                distance: distance,\n                time: time\n              });\n              _context2.next = 19;\n              break;\n\n            case 16:\n              _context2.prev = 16;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log('Error: ', _context2.t0);\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[0, 16]], Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          latitude = _this$state2.latitude,\n          longitude = _this$state2.longitude,\n          coords = _this$state2.coords;\n\n      if (latitude) {\n        return React.createElement(MapView, {\n          showsUserLocation: true,\n          style: {\n            flex: 1\n          },\n          initialRegion: {\n            latitude: latitude,\n            longitude: longitude,\n            latitudeDelta: 0.0922,\n            longitudeDelta: 0.0421\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 9\n          }\n        }, React.createElement(MapView.Polyline, {\n          strokeWidth: 2,\n          strokeColor: \"red\",\n          coordinates: coords,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 11\n          }\n        }));\n      }\n\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }\n      }, \"We need your permission!\"), React.createElement(Button, {\n        title: \"Sign out\",\n        onPress: function onPress() {\n          return firebase.auth().signOut();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return DashboardScreen;\n}(React.Component);\n\nexport default DashboardScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  mapStyle: {\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height\n  }\n});","map":{"version":3,"sources":["/Users/chengpo-chien/expo-practice/Mahjong/screens/DashboardScreen.js"],"names":["React","MapView","Permissions","firebase","Polyline","Marker","locations","require","DashboardScreen","state","latitude","longitude","mergeCoords","desLatitude","desLongitude","hasStartAndEnd","concatStart","concatEnd","getDirections","onMarkerPress","location","coords","setState","destination","renderMarkers","map","idx","getAsync","LOCATION","status","askAsync","response","navigator","geolocation","getCurrentPosition","error","console","log","sampleLocation","startLoc","desLoc","fetch","resp","json","respJson","routes","distanceTime","legs","distance","text","time","duration","points","decode","overview_polyline","point","flex","latitudeDelta","longitudeDelta","justifyContent","alignItems","auth","signOut","Component","styles","StyleSheet","create","container","backgroundColor","mapStyle","width","Dimensions","get","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet, Button,Dimensions } from 'react-native';\nimport MapView from 'react-native-maps';\n\nimport * as Permissions from 'expo-permissions'\nimport firebase from 'firebase';\nimport Polyline from '@mapbox/polyline'\nimport { Marker } from 'react-native-maps'\n\nconst locations = require('./locations.json')\n// const { width, heigt } = Dimensions.get('screen')\n\n\nclass DashboardScreen extends React.Component {\n  state = {\n    latitude: null,\n    longitude: null,\n    locations: locations\n  }\n \n  async componentDidMount() {\n    const { status } = await Permissions.getAsync(Permissions.LOCATION)\n\n    if (status !== 'granted') {\n      const response = await Permissions.askAsync(Permissions.LOCATION)\n    }\n    navigator.geolocation.getCurrentPosition(\n      ({ coords: { latitude, longitude } }) => this.setState({ latitude, longitude }, this.mergeCoords),\n      (error) => console.log('Error:', error)\n    )\n\n    const { locations: [ sampleLocation ] } = this.state\n\n    this.setState({\n      desLatitude: sampleLocation.coords.latitude,\n      desLongitude: sampleLocation.coords.longitude\n    }, this.mergeCoords)\n\n\n  }\n\n  mergeCoords = () => {\n    const {\n      latitude,\n      longitude,\n      desLatitude,\n      desLongitude\n    } = this.state\n\n    const hasStartAndEnd = latitude !== null && desLatitude !== null\n\n    if (hasStartAndEnd) {\n      const concatStart = `${latitude},${longitude}`\n      const concatEnd = `${desLatitude},${desLongitude}`\n      this.getDirections(concatStart, concatEnd)\n    }\n  }\n\n  async getDirections(startLoc, desLoc) {\n    try {\n      const resp = await fetch(`https://maps.googleapis.com/maps/api/directions/json?origin=${startLoc}&destination=${desLoc}&key=AIzaSyDgkU5775LUQXl8NDdIJzXNEyun95sA_rY`)\n      const respJson = await resp.json();\n      const response = respJson.routes[0]\n      const distanceTime = response.legs[0]\n      const distance = distanceTime.distance.text\n      const time = distanceTime.duration.text\n      const points = Polyline.decode(respJson.routes[0].overview_polyline.points);\n      const coords = points.map(point => {\n        return {\n          latitude: point[0],\n          longitude: point[1]\n        }\n      })\n      this.setState({ coords, distance, time })\n    } catch(error) {\n      console.log('Error: ', error)\n    }\n  }\n\n  onMarkerPress = location => () => {\n    const { coords: { latitude, longitude } } = location\n    this.setState({\n      destination: location,\n      desLatitude: latitude,\n      desLongitude: longitude\n    }, this.mergeCoords)\n  }\n\n  renderMarkers = () => {\n    const { locations } = this.state\n    return (\n      <View>\n        {\n          locations.map((location, idx) => {\n            const {\n              coords: { latitude, longitude }\n            } = location\n            return (\n              <Marker\n                key={idx}\n                coordinate={{ latitude, longitude }}\n                onPress={this.onMarkerPress(location)}\n              />\n            )\n          })\n        }\n      </View>\n    )\n  }\n\n  render() {  \n    const { latitude,longitude,coords} = this.state\n    if(latitude){\n      return (\n        <MapView\n            showsUserLocation\n            style={{ flex: 1 }}\n            initialRegion={{\n              latitude,\n              longitude,\n              latitudeDelta: 0.0922,\n              longitudeDelta: 0.0421\n            }}\n          >\n          <MapView.Polyline\n            strokeWidth={2}\n            strokeColor=\"red\"\n            coordinates={coords}\n\n          />\n        </MapView> \n          // <Button title=\"Sign out\" onPress={() => firebase.auth().signOut()} />\n          // <Text>DashboardScreen</Text>\n      );\n\n    }\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>We need your permission!</Text>\n        <Button title=\"Sign out\" onPress={() => firebase.auth().signOut()} />\n      </View>\n    )\n    \n  }\n}\nexport default DashboardScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  mapStyle: {\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height,\n  },\n});"]},"metadata":{},"sourceType":"module"}