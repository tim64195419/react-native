{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/chengpo-chien/expo-practice/Mahjong/screens/LoginScreen.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen() {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.signInWithGoogleAsync = function _callee() {\n      var result;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Google.logInAsync({\n                iosClientId: 41405179045 - h5mts9lrprh6qar1ag376s4pn060u7pt.apps.googleusercontent.com,\n                scopes: ['profile', 'email']\n              }));\n\n            case 3:\n              result = _context.sent;\n\n              if (!(result.type === 'success')) {\n                _context.next = 8;\n                break;\n              }\n\n              return _context.abrupt(\"return\", result.accessToken);\n\n            case 8:\n              return _context.abrupt(\"return\", {\n                cancelled: true\n              });\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              return _context.abrupt(\"return\", {\n                error: true\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 11]], Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }\n      }, \" LoginScreen \"), React.createElement(Button, {\n        title: \"sign in with google\",\n        onPress: function onPress() {\n          return alert('button pressed');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nexport { LoginScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/chengpo-chien/expo-practice/Mahjong/screens/LoginScreen.js"],"names":["React","Component","LoginScreen","signInWithGoogleAsync","Google","logInAsync","iosClientId","h5mts9lrprh6qar1ag376s4pn060u7pt","apps","googleusercontent","com","scopes","result","type","accessToken","cancelled","error","styles","container","alert","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;IAGqBC,W;;;;;;;;;;;;;;;;UAEjBC,qB,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEGC,MAAM,CAACC,UAAP,CAAkB;AAErCC,gBAAAA,WAAW,EAAE,cAAYC,gCAAgC,CAACC,IAAjC,CAAsCC,iBAAtC,CAAwDC,GAF5C;AAGrCC,gBAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,OAAZ;AAH6B,eAAlB,CAFH;;AAAA;AAEZC,cAAAA,MAFY;;AAAA,oBAQdA,MAAM,CAACC,IAAP,KAAgB,SARF;AAAA;AAAA;AAAA;;AAAA,+CASTD,MAAM,CAACE,WATE;;AAAA;AAAA,+CAWT;AAAEC,gBAAAA,SAAS,EAAE;AAAb,eAXS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAcX;AAAEC,gBAAAA,KAAK,EAAE;AAAT,eAdW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;6BAkBf;AACL,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,EAEI,oBAAC,MAAD;AACI,QAAA,KAAK,EAAC,qBADV;AAEI,QAAA,OAAO,EAAE;AAAA,iBAAIC,KAAK,CAAC,gBAAD,CAAT;AAAA,SAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ;AAUH;;;;EA/BoClB,S;;SAApBC,W;AAkCrB,IAAMe,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC7BH,EAAAA,SAAS,EAAE;AACPI,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,eAAe,EAAE,MAFV;AAGPC,IAAAA,UAAU,EAAE,QAHL;AAIPC,IAAAA,cAAc,EAAE;AAJT;AADkB,CAAlB,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Text, StyleSheet, View ,Button} from 'react-native'\n\nexport default class LoginScreen extends Component {\n\n    signInWithGoogleAsync = async () => {\n        try {\n          const result = await Google.logInAsync({\n            // androidClientId: YOUR_CLIENT_ID_HERE,\n            iosClientId: 41405179045-h5mts9lrprh6qar1ag376s4pn060u7pt.apps.googleusercontent.com,\n            scopes: ['profile', 'email'],\n          });\n      \n          if (result.type === 'success') {\n            return result.accessToken;\n          } else {\n            return { cancelled: true };\n          }\n        } catch (e) {\n          return { error: true };\n        }\n      }\n\n    render() {\n        return (\n            <View style={styles.container}>\n                <Text> LoginScreen </Text>\n                <Button\n                    title='sign in with google'\n                    onPress={()=>alert('button pressed')}\n                />\n\n            </View>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center',\n      },\n})\n"]},"metadata":{},"sourceType":"module"}